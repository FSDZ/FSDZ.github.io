<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Tkinter的聚类分析应用</title>
    <link href="/2025/02/04/%E5%9F%BA%E4%BA%8ETkinter%E7%9A%84%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E5%BA%94%E7%94%A8/"/>
    <url>/2025/02/04/%E5%9F%BA%E4%BA%8ETkinter%E7%9A%84%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>实现一个图形用户界面（GUI）应用程序，允许用户进行手写数字图像的层次聚类分析。用户可以通过两种模式：位图模式（上传图片）或手写模式（自由绘制）输入数据，然后使用最短距离算法进行层次聚类，并在输出面板上显示聚类结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> ttk, filedialog, messagebox  <span class="hljs-comment"># 导入tkinter相关库，用于GUI操作</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageTk  <span class="hljs-comment"># 导入PIL库，用于图片处理</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <span class="hljs-comment"># 导入numpy库，用于数值计算</span><br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> euclidean  <span class="hljs-comment"># 导入euclidean距离计算函数</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DigitClusteringApp</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化应用程序。</span><br><span class="hljs-string">        设置界面标题，大小，并创建界面元素。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.root = root  <span class="hljs-comment"># Tkinter窗口对象</span><br>        <span class="hljs-variable language_">self</span>.root.title(<span class="hljs-string">&quot;聚类分析&quot;</span>)  <span class="hljs-comment"># 窗口标题</span><br>        <span class="hljs-variable language_">self</span>.root.geometry(<span class="hljs-string">&quot;1200x800&quot;</span>)  <span class="hljs-comment"># 窗口大小</span><br><br>        <span class="hljs-comment"># 当前模式：初始化为位图模式</span><br>        <span class="hljs-variable language_">self</span>.current_mode = <span class="hljs-string">&quot;位图&quot;</span><br>        <span class="hljs-variable language_">self</span>.current_image = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 当前显示的图片</span><br><br>        <span class="hljs-variable language_">self</span>.create_menu()  <span class="hljs-comment"># 创建菜单</span><br>        <span class="hljs-variable language_">self</span>.create_main_interface()  <span class="hljs-comment"># 创建主界面元素</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_menu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        创建窗口菜单。</span><br><span class="hljs-string">        包括层次聚类菜单，菜单项为最短距离算法。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        menubar = tk.Menu(<span class="hljs-variable language_">self</span>.root)  <span class="hljs-comment"># 创建菜单栏</span><br>        <span class="hljs-variable language_">self</span>.root.config(menu=menubar)  <span class="hljs-comment"># 将菜单栏配置到窗口</span><br><br>        <span class="hljs-comment"># 创建&quot;层次聚类&quot;菜单，并添加到菜单栏</span><br>        local_menu = tk.Menu(menubar, tearoff=<span class="hljs-number">0</span>)<br>        menubar.add_cascade(label=<span class="hljs-string">&quot;层次聚类&quot;</span>, menu=local_menu)<br>        <span class="hljs-comment"># 添加菜单项&quot;最短距离算法&quot;，并绑定函数</span><br>        local_menu.add_command(label=<span class="hljs-string">&quot;最短距离算法&quot;</span>, command=<span class="hljs-variable language_">self</span>.run_shortest_distance_clustering)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_main_interface</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        创建主界面的所有控件，包括模式选择框架、输入面板、输出面板等。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 模式选择框架</span><br>        mode_frame = ttk.LabelFrame(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">&quot;输入模式&quot;</span>)<br>        mode_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 模式标签</span><br>        <span class="hljs-variable language_">self</span>.mode_label = ttk.Label(mode_frame, text=<span class="hljs-string">&quot;当前为位图模式&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.mode_label.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 模式切换按钮</span><br>        ttk.Button(mode_frame, text=<span class="hljs-string">&quot;位图模式&quot;</span>, command=<span class="hljs-variable language_">self</span>.switch_to_image_mode).pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br>        ttk.Button(mode_frame, text=<span class="hljs-string">&quot;手写模式&quot;</span>, command=<span class="hljs-variable language_">self</span>.switch_to_drawing_mode).pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 主要内容区域</span><br>        content_frame = ttk.Frame(<span class="hljs-variable language_">self</span>.root)<br>        content_frame.pack(fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>, padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 输入面板</span><br>        <span class="hljs-variable language_">self</span>.input_frame = ttk.LabelFrame(content_frame, text=<span class="hljs-string">&quot;输入面板&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.input_frame.pack(side=<span class="hljs-string">&quot;left&quot;</span>, fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 输入画布</span><br>        <span class="hljs-variable language_">self</span>.input_canvas = tk.Canvas(<span class="hljs-variable language_">self</span>.input_frame, bg=<span class="hljs-string">&quot;white&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.input_canvas.pack(fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># 图片上传按钮</span><br>        <span class="hljs-variable language_">self</span>.upload_button = ttk.Button(<span class="hljs-variable language_">self</span>.input_frame, text=<span class="hljs-string">&quot;打开一幅图片&quot;</span>, command=<span class="hljs-variable language_">self</span>.upload_image)<br>        <span class="hljs-variable language_">self</span>.upload_button.pack(pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 输出面板</span><br>        output_frame = ttk.LabelFrame(content_frame, text=<span class="hljs-string">&quot;输出面板&quot;</span>)<br>        output_frame.pack(side=<span class="hljs-string">&quot;right&quot;</span>, fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 输出画布</span><br>        <span class="hljs-variable language_">self</span>.output_canvas = tk.Canvas(output_frame, bg=<span class="hljs-string">&quot;white&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.output_canvas.pack(fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># 清除按钮</span><br>        ttk.Button(output_frame, text=<span class="hljs-string">&quot;清空面板&quot;</span>, command=<span class="hljs-variable language_">self</span>.clear_output).pack(pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># 绘画相关变量</span><br>        <span class="hljs-variable language_">self</span>.drawing = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.last_x = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.last_y = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 绑定鼠标事件</span><br>        <span class="hljs-variable language_">self</span>.input_canvas.bind(<span class="hljs-string">&quot;&lt;Button-1&gt;&quot;</span>, <span class="hljs-variable language_">self</span>.start_drawing)<br>        <span class="hljs-variable language_">self</span>.input_canvas.bind(<span class="hljs-string">&quot;&lt;B1-Motion&gt;&quot;</span>, <span class="hljs-variable language_">self</span>.draw)<br>        <span class="hljs-variable language_">self</span>.input_canvas.bind(<span class="hljs-string">&quot;&lt;ButtonRelease-1&gt;&quot;</span>, <span class="hljs-variable language_">self</span>.stop_drawing)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_image_mode</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        切换到位图模式，显示模式为&quot;位图&quot;，并清空画布。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.current_mode = <span class="hljs-string">&quot;位图&quot;</span><br>        <span class="hljs-variable language_">self</span>.mode_label.config(text=<span class="hljs-string">&quot;当前为位图模式&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.clear_input()  <span class="hljs-comment"># 清空输入画布</span><br>        <span class="hljs-variable language_">self</span>.upload_button.pack(pady=<span class="hljs-number">5</span>)  <span class="hljs-comment"># 显示上传图片按钮</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_drawing_mode</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        切换到手写模式，显示模式为&quot;手写&quot;，并清空画布。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.current_mode = <span class="hljs-string">&quot;手写&quot;</span><br>        <span class="hljs-variable language_">self</span>.mode_label.config(text=<span class="hljs-string">&quot;当前为手写模式&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.clear_input()  <span class="hljs-comment"># 清空输入画布</span><br>        <span class="hljs-variable language_">self</span>.upload_button.pack_forget()  <span class="hljs-comment"># 隐藏上传图片按钮</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_image</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        打开文件对话框，选择图片文件并显示在输入画布上。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        file_path = filedialog.askopenfilename(<br>            filetypes=[(<span class="hljs-string">&quot;Image files&quot;</span>, <span class="hljs-string">&quot;*.png *.jpg *.jpeg *.gif *.bmp *.ppm *.pgm&quot;</span>)]<br>        )<br>        <span class="hljs-keyword">if</span> file_path:<br>            image = Image.<span class="hljs-built_in">open</span>(file_path)  <span class="hljs-comment"># 打开图片文件</span><br>            <span class="hljs-comment"># 调整图片大小以适应画布</span><br>            canvas_width = <span class="hljs-variable language_">self</span>.input_canvas.winfo_width()<br>            canvas_height = <span class="hljs-variable language_">self</span>.input_canvas.winfo_height()<br>            image = image.resize((canvas_width, canvas_height), Image.Resampling.LANCZOS)<br>            <span class="hljs-variable language_">self</span>.current_image = ImageTk.PhotoImage(image)  <span class="hljs-comment"># 转换为Tkinter可用的图片格式</span><br>            <span class="hljs-variable language_">self</span>.input_canvas.create_image(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, anchor=<span class="hljs-string">&quot;nw&quot;</span>, image=<span class="hljs-variable language_">self</span>.current_image)  <span class="hljs-comment"># 在画布上显示图片</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_drawing</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        开始绘画：记录起始点。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_mode == <span class="hljs-string">&quot;手写&quot;</span>:<br>            <span class="hljs-variable language_">self</span>.drawing = <span class="hljs-literal">True</span><br>            <span class="hljs-variable language_">self</span>.last_x = event.x<br>            <span class="hljs-variable language_">self</span>.last_y = event.y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        绘画：在画布上绘制线条，跟踪鼠标的移动。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_mode == <span class="hljs-string">&quot;手写&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.drawing:<br>            <span class="hljs-variable language_">self</span>.input_canvas.create_line(<br>                <span class="hljs-variable language_">self</span>.last_x, <span class="hljs-variable language_">self</span>.last_y, event.x, event.y,<br>                width=<span class="hljs-number">2</span>, fill=<span class="hljs-string">&quot;black&quot;</span>, smooth=<span class="hljs-literal">True</span>  <span class="hljs-comment"># 绘制平滑的线条</span><br>            )<br>            <span class="hljs-variable language_">self</span>.last_x = event.x<br>            <span class="hljs-variable language_">self</span>.last_y = event.y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop_drawing</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        停止绘画：结束绘画模式。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.drawing = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_input</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        清空输入画布。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.input_canvas.delete(<span class="hljs-string">&quot;all&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        清空输出画布。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.output_canvas.delete(<span class="hljs-string">&quot;all&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_shortest_distance_clustering</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        运行最短距离算法进行层次聚类。</span><br><span class="hljs-string">        如果未上传图片或在手写模式下没有输入内容，则弹出警告。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_image <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            messagebox.showwarning(<span class="hljs-string">&quot;警告&quot;</span>, <span class="hljs-string">&quot;请先上传图片或在手写模式下输入内容！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 模拟样本数据 (实际应用中应从图片提取)</span><br>        sample_data = np.random.rand(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 随机生成 10 个点作为示例</span><br>        clustered_data = <span class="hljs-variable language_">self</span>.shortest_distance_clustering(sample_data)  <span class="hljs-comment"># 进行层次聚类</span><br>        <span class="hljs-variable language_">self</span>.display_clustered_data(clustered_data)  <span class="hljs-comment"># 显示聚类结果</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shortest_distance_clustering</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        层次聚类的实现：使用最短距离算法合并距离较近的点。</span><br><span class="hljs-string">        返回聚类后的数据。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        pattern_num = <span class="hljs-built_in">len</span>(data)  <span class="hljs-comment"># 数据点数量</span><br>        categories = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(pattern_num))  <span class="hljs-comment"># 每个点的初始类别为其索引</span><br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            min_distance = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)  <span class="hljs-comment"># 初始化最小距离</span><br>            merge_pair = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 初始化待合并的点对</span><br><br>            <span class="hljs-comment"># 计算所有点对之间的欧几里得距离</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(data)):<br>                    <span class="hljs-keyword">if</span> categories[i] != categories[j]:<br>                        distance = euclidean(data[i], data[j])<br>                        <span class="hljs-keyword">if</span> distance &lt; min_distance:<br>                            min_distance = distance<br>                            merge_pair = (categories[i], categories[j])<br><br>            <span class="hljs-comment"># 如果距离小于阈值（0.5），则合并</span><br>            <span class="hljs-keyword">if</span> min_distance &lt;= <span class="hljs-number">0.5</span>:<br>                cat_a, cat_b = <span class="hljs-built_in">sorted</span>(merge_pair)<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(categories)):<br>                    <span class="hljs-keyword">if</span> categories[k] == cat_b:<br>                        categories[k] = cat_a<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 距离较远时停止合并</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(data, categories))  <span class="hljs-comment"># 返回点及其所属的类别</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display_clustered_data</span>(<span class="hljs-params">self, clustered_data</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        在输出画布上显示聚类结果。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.output_canvas.delete(<span class="hljs-string">&quot;all&quot;</span>)  <span class="hljs-comment"># 清空输出画布</span><br>        <span class="hljs-keyword">for</span> point, category <span class="hljs-keyword">in</span> clustered_data:<br>            x, y = point<br>            <span class="hljs-variable language_">self</span>.output_canvas.create_oval(<br>                x * <span class="hljs-number">200</span>, y * <span class="hljs-number">200</span>, x * <span class="hljs-number">200</span> + <span class="hljs-number">10</span>, y * <span class="hljs-number">200</span> + <span class="hljs-number">10</span>,<br>                fill=<span class="hljs-string">f&quot;#00<span class="hljs-subst">&#123;category + <span class="hljs-number">2</span>&#125;</span>22&quot;</span>, outline=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 使用不同的颜色表示不同类别</span><br>            )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主函数：启动应用程序。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    root = tk.Tk()  <span class="hljs-comment"># 创建Tkinter根窗口</span><br>    app = DigitClusteringApp(root)  <span class="hljs-comment"># 创建应用程序实例</span><br>    root.mainloop()  <span class="hljs-comment"># 进入Tkinter事件循环</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()  <span class="hljs-comment"># 启动应用</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>与你同行</title>
    <link href="/2025/01/03/%E4%B8%8E%E4%BD%A0%E5%90%8C%E8%A1%8C/"/>
    <url>/2025/01/03/%E4%B8%8E%E4%BD%A0%E5%90%8C%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="与你同行"><a href="#与你同行" class="headerlink" title="与你同行"></a>与你同行</h1><p><strong>【作者】席慕容  【朝代】现代</strong></p><hr><p>我一直想要 和你一起 走上那条美丽的山路<br>有柔风 有白云 有你在我身旁<br>倾听我快乐和感激的心</p><p>我的要求其实很微小 只要有过那样的一个夏日<br>只要走过 那样的一次</p><p>而朝我迎来的 日复以夜 却都是一些不被料到的安排<br>还有那麽多琐碎的错误 将我们慢慢地慢慢地隔开<br>让今夜的我 终於明白</p><p>所有的悲欢都已成灰烬 任世间哪一条路我都不能<br>与你同行</p>]]></content>
    
    
    
    <tags>
      
      <tag>诗歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/02/hello-world/"/>
    <url>/2025/01/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
