<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Tkinter的聚类分析应用</title>
    <link href="/2025/02/04/%E5%9F%BA%E4%BA%8ETkinter%E7%9A%84%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E5%BA%94%E7%94%A8/"/>
    <url>/2025/02/04/%E5%9F%BA%E4%BA%8ETkinter%E7%9A%84%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>import tkinter as tk<br>from tkinter import ttk, filedialog, messagebox  # 导入tkinter相关库，用于GUI操作<br>from PIL import Image, ImageTk  # 导入PIL库，用于图片处理<br>import numpy as np  # 导入numpy库，用于数值计算<br>from scipy.spatial.distance import euclidean  # 导入euclidean距离计算函数</p><p>class DigitClusteringApp:<br>    def <strong>init</strong>(self, root):<br>        “””<br>        初始化应用程序。<br>        设置界面标题，大小，并创建界面元素。<br>        “””<br>        self.root &#x3D; root  # Tkinter窗口对象<br>        self.root.title(“聚类分析”)  # 窗口标题<br>        self.root.geometry(“1200x800”)  # 窗口大小</p><pre><code class="hljs">    # 当前模式：初始化为位图模式    self.current_mode = &quot;位图&quot;    self.current_image = None  # 当前显示的图片    self.create_menu()  # 创建菜单    self.create_main_interface()  # 创建主界面元素def create_menu(self):    &quot;&quot;&quot;    创建窗口菜单。    包括层次聚类菜单，菜单项为最短距离算法。    &quot;&quot;&quot;    menubar = tk.Menu(self.root)  # 创建菜单栏    self.root.config(menu=menubar)  # 将菜单栏配置到窗口    # 创建&quot;层次聚类&quot;菜单，并添加到菜单栏    local_menu = tk.Menu(menubar, tearoff=0)    menubar.add_cascade(label=&quot;层次聚类&quot;, menu=local_menu)    # 添加菜单项&quot;最短距离算法&quot;，并绑定函数    local_menu.add_command(label=&quot;最短距离算法&quot;, command=self.run_shortest_distance_clustering)def create_main_interface(self):    &quot;&quot;&quot;    创建主界面的所有控件，包括模式选择框架、输入面板、输出面板等。    &quot;&quot;&quot;    # 模式选择框架    mode_frame = ttk.LabelFrame(self.root, text=&quot;输入模式&quot;)    mode_frame.pack(fill=&quot;x&quot;, padx=5, pady=5)    # 模式标签    self.mode_label = ttk.Label(mode_frame, text=&quot;当前为位图模式&quot;)    self.mode_label.pack(side=&quot;left&quot;, padx=5)    # 模式切换按钮    ttk.Button(mode_frame, text=&quot;位图模式&quot;, command=self.switch_to_image_mode).pack(side=&quot;left&quot;, padx=5)    ttk.Button(mode_frame, text=&quot;手写模式&quot;, command=self.switch_to_drawing_mode).pack(side=&quot;left&quot;, padx=5)    # 主要内容区域    content_frame = ttk.Frame(self.root)    content_frame.pack(fill=&quot;both&quot;, expand=True, padx=5, pady=5)    # 输入面板    self.input_frame = ttk.LabelFrame(content_frame, text=&quot;输入面板&quot;)    self.input_frame.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True, padx=5)    # 输入画布    self.input_canvas = tk.Canvas(self.input_frame, bg=&quot;white&quot;)    self.input_canvas.pack(fill=&quot;both&quot;, expand=True)    # 图片上传按钮    self.upload_button = ttk.Button(self.input_frame, text=&quot;打开一幅图片&quot;, command=self.upload_image)    self.upload_button.pack(pady=5)    # 输出面板    output_frame = ttk.LabelFrame(content_frame, text=&quot;输出面板&quot;)    output_frame.pack(side=&quot;right&quot;, fill=&quot;both&quot;, expand=True, padx=5)    # 输出画布    self.output_canvas = tk.Canvas(output_frame, bg=&quot;white&quot;)    self.output_canvas.pack(fill=&quot;both&quot;, expand=True)    # 清除按钮    ttk.Button(output_frame, text=&quot;清空面板&quot;, command=self.clear_output).pack(pady=5)    # 绘画相关变量    self.drawing = False    self.last_x = None    self.last_y = None    # 绑定鼠标事件    self.input_canvas.bind(&quot;&lt;Button-1&gt;&quot;, self.start_drawing)    self.input_canvas.bind(&quot;&lt;B1-Motion&gt;&quot;, self.draw)    self.input_canvas.bind(&quot;&lt;ButtonRelease-1&gt;&quot;, self.stop_drawing)def switch_to_image_mode(self):    &quot;&quot;&quot;    切换到位图模式，显示模式为&quot;位图&quot;，并清空画布。    &quot;&quot;&quot;    self.current_mode = &quot;位图&quot;    self.mode_label.config(text=&quot;当前为位图模式&quot;)    self.clear_input()  # 清空输入画布    self.upload_button.pack(pady=5)  # 显示上传图片按钮def switch_to_drawing_mode(self):    &quot;&quot;&quot;    切换到手写模式，显示模式为&quot;手写&quot;，并清空画布。    &quot;&quot;&quot;    self.current_mode = &quot;手写&quot;    self.mode_label.config(text=&quot;当前为手写模式&quot;)    self.clear_input()  # 清空输入画布    self.upload_button.pack_forget()  # 隐藏上传图片按钮def upload_image(self):    &quot;&quot;&quot;    打开文件对话框，选择图片文件并显示在输入画布上。    &quot;&quot;&quot;    file_path = filedialog.askopenfilename(        filetypes=[(&quot;Image files&quot;, &quot;*.png *.jpg *.jpeg *.gif *.bmp *.ppm *.pgm&quot;)]    )    if file_path:        image = Image.open(file_path)  # 打开图片文件        # 调整图片大小以适应画布        canvas_width = self.input_canvas.winfo_width()        canvas_height = self.input_canvas.winfo_height()        image = image.resize((canvas_width, canvas_height), Image.Resampling.LANCZOS)        self.current_image = ImageTk.PhotoImage(image)  # 转换为Tkinter可用的图片格式        self.input_canvas.create_image(0, 0, anchor=&quot;nw&quot;, image=self.current_image)  # 在画布上显示图片def start_drawing(self, event):    &quot;&quot;&quot;    开始绘画：记录起始点。    &quot;&quot;&quot;    if self.current_mode == &quot;手写&quot;:        self.drawing = True        self.last_x = event.x        self.last_y = event.ydef draw(self, event):    &quot;&quot;&quot;    绘画：在画布上绘制线条，跟踪鼠标的移动。    &quot;&quot;&quot;    if self.current_mode == &quot;手写&quot; and self.drawing:        self.input_canvas.create_line(            self.last_x, self.last_y, event.x, event.y,            width=2, fill=&quot;black&quot;, smooth=True  # 绘制平滑的线条        )        self.last_x = event.x        self.last_y = event.ydef stop_drawing(self, event):    &quot;&quot;&quot;    停止绘画：结束绘画模式。    &quot;&quot;&quot;    self.drawing = Falsedef clear_input(self):    &quot;&quot;&quot;    清空输入画布。    &quot;&quot;&quot;    self.input_canvas.delete(&quot;all&quot;)def clear_output(self):    &quot;&quot;&quot;    清空输出画布。    &quot;&quot;&quot;    self.output_canvas.delete(&quot;all&quot;)def run_shortest_distance_clustering(self):    &quot;&quot;&quot;    运行最短距离算法进行层次聚类。    如果未上传图片或在手写模式下没有输入内容，则弹出警告。    &quot;&quot;&quot;    if self.current_image is None:        messagebox.showwarning(&quot;警告&quot;, &quot;请先上传图片或在手写模式下输入内容！&quot;)        return    # 模拟样本数据 (实际应用中应从图片提取)    sample_data = np.random.rand(10, 2)  # 随机生成 10 个点作为示例    clustered_data = self.shortest_distance_clustering(sample_data)  # 进行层次聚类    self.display_clustered_data(clustered_data)  # 显示聚类结果def shortest_distance_clustering(self, data):    &quot;&quot;&quot;    层次聚类的实现：使用最短距离算法合并距离较近的点。    返回聚类后的数据。    &quot;&quot;&quot;    pattern_num = len(data)  # 数据点数量    categories = list(range(pattern_num))  # 每个点的初始类别为其索引    while True:        min_distance = float(&#39;inf&#39;)  # 初始化最小距离        merge_pair = None  # 初始化待合并的点对        # 计算所有点对之间的欧几里得距离        for i in range(len(data)):            for j in range(i + 1, len(data)):                if categories[i] != categories[j]:                    distance = euclidean(data[i], data[j])                    if distance &lt; min_distance:                        min_distance = distance                        merge_pair = (categories[i], categories[j])        # 如果距离小于阈值（0.5），则合并        if min_distance &lt;= 0.5:            cat_a, cat_b = sorted(merge_pair)            for k in range(len(categories)):                if categories[k] == cat_b:                    categories[k] = cat_a        else:            break  # 距离较远时停止合并    return list(zip(data, categories))  # 返回点及其所属的类别def display_clustered_data(self, clustered_data):    &quot;&quot;&quot;    在输出画布上显示聚类结果。    &quot;&quot;&quot;    self.output_canvas.delete(&quot;all&quot;)  # 清空输出画布    for point, category in clustered_data:        x, y = point        self.output_canvas.create_oval(            x * 200, y * 200, x * 200 + 10, y * 200 + 10,            fill=f&quot;#00&#123;category + 2&#125;22&quot;, outline=&quot;&quot;  # 使用不同的颜色表示不同类别        )</code></pre><p>def main():<br>    “””<br>    主函数：启动应用程序。<br>    “””<br>    root &#x3D; tk.Tk()  # 创建Tkinter根窗口<br>    app &#x3D; DigitClusteringApp(root)  # 创建应用程序实例<br>    root.mainloop()  # 进入Tkinter事件循环</p><p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>    main()  # 启动应用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>与你同行</title>
    <link href="/2025/01/03/%E4%B8%8E%E4%BD%A0%E5%90%8C%E8%A1%8C/"/>
    <url>/2025/01/03/%E4%B8%8E%E4%BD%A0%E5%90%8C%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="与你同行"><a href="#与你同行" class="headerlink" title="与你同行"></a>与你同行</h1><p><strong>【作者】席慕容  【朝代】现代</strong></p><hr><p>我一直想要 和你一起 走上那条美丽的山路<br>有柔风 有白云 有你在我身旁<br>倾听我快乐和感激的心</p><p>我的要求其实很微小 只要有过那样的一个夏日<br>只要走过 那样的一次</p><p>而朝我迎来的 日复以夜 却都是一些不被料到的安排<br>还有那麽多琐碎的错误 将我们慢慢地慢慢地隔开<br>让今夜的我 终於明白</p><p>所有的悲欢都已成灰烬 任世间哪一条路我都不能<br>与你同行</p>]]></content>
    
    
    
    <tags>
      
      <tag>诗歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/02/hello-world/"/>
    <url>/2025/01/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
